color = "Living Income Female-headed: 90% below"),
key_glyph = "path") +
geom_vline(aes(xintercept = 4742,
color = "Living Income Male-headed, typical: 91% below"),
key_glyph = "path") +
geom_vline(aes(xintercept = 5123,
color = "Living Income Male-headed, large: 59% below"),
key_glyph = "path") +
scale_color_manual(name = "Legend",
values = c("Living Income Female-headed: 90% below"= "red",
"Living Income Male-headed, typical: 91% below"= "blue",
"Living Income Male-headed, large: 59% below"="green")) +
# Add graph and axis labels
labs(x = "Estimated Total Household Income (USD/year/household)",
y = "Proportion of households",
# Manually UPDATE the numbers in this character string to the number of observations for each household type
caption = "Based on:
Male-headed, typical: 595 observations
Male-headed, large: 187 observations
Female-headed: 144 observations") +
# Format x-axis labels as numbers with commas
# If your data has extreme income outliers,
# you may need to filter them or add x-axis limits so they do not warp the graph
scale_x_continuous(labels = comma) +
# Remove y-axis labels and ticks
theme(axis.text.y = element_blank(), axis.ticks.y = element_blank(),
# Remove background grid (the grid is the default)
panel.grid.major = element_blank(), panel.grid.minor = element_blank(),
# Move the legend to the bottom of the graph
legend.position="bottom",
# Remove legend title
legend.title = element_blank(),
# Remove gray background for legend symbols
legend.key=element_rect(fill=NA),
# Move caption to desired location
plot.caption = element_text(hjust = 0)) +
# Wrap legend onto 2 lines to fit everything neatly
guides(fill = FALSE) +
# Wrap legend onto 3 lines to fit everything neatly
guides(color = guide_legend(nrow = 3))
DATA %>%
# Set x-axis to total household income
ggplot(aes(x = total_hh_income_2018,
# Color by household type
fill = grouping)) +
# Add density line. You can change the fill and line colors.
geom_density(alpha = 0.9, color = "grey") +
### Add vertical lines for Living Income benchmark(s)
# UPDATE these benchmarks and percent above manually
# Add and/or subtract lines based on number of household types
# and if you have a different benchmark for each.
geom_vline(aes(xintercept = 4001,
color = "Living Income Female-headed: 90% below"),
key_glyph = "path") +
geom_vline(aes(xintercept = 4742,
color = "Living Income Male-headed, typical: 91% below"),
key_glyph = "path") +
geom_vline(aes(xintercept = 5123,
color = "Living Income Male-headed, large: 59% below"),
key_glyph = "path") +
scale_color_manual(name = "Legend",
values = c("Living Income Female-headed: 90% below"= "red",
"Living Income Male-headed, typical: 91% below"= "blue",
"Living Income Male-headed, large: 59% below"="green")) +
# Add graph and axis labels
labs(x = "Estimated Total Household Income (USD/year/household)",
y = "Proportion of households",
# Manually UPDATE the numbers in this character string to the number of observations for each household type
caption = "Based on:
Male-headed, typical: 595 observations
Male-headed, large: 187 observations
Female-headed: 144 observations") +
# Format x-axis labels as numbers with commas
# If your data has extreme income outliers,
# you may need to filter them or add x-axis limits so they do not warp the graph
scale_x_continuous(labels = comma) +
# Remove y-axis labels and ticks
theme(axis.text.y = element_blank(), axis.ticks.y = element_blank(),
# Remove background grid (the grid is the default)
panel.grid.major = element_blank(), panel.grid.minor = element_blank(),
# Move the legend to the bottom of the graph
legend.position="bottom",
# Remove legend title
legend.title = element_blank(),
# Remove gray background for legend symbols
legend.key=element_rect(fill=NA),
legend.box.background = element_rect(),
# Move caption to desired location
plot.caption = element_text(hjust = 0)) +
# Wrap legend onto 2 lines to fit everything neatly
guides(fill = FALSE) +
# Wrap legend onto 3 lines to fit everything neatly
guides(color = guide_legend(nrow = 3))
DATA %>%
# Set x-axis to key variable
ggplot(aes(x = total_hh_income_2018)) +
# Add density line. You can change the fill and line colors.
geom_density(color = "#add8e6", fill = "#add8e6") +
# Add vertical line for living income
geom_vline(aes(xintercept = mean(benchmark),
color = "Living Income Benchmark"), key_glyph = "path") +
# Add vertical line for mean income
geom_vline(aes(xintercept = mean(DATA$total_hh_income_2018),
color = "Income Mean"), key_glyph = "path") +
# Add vertical line for median income
geom_vline(aes(xintercept = median(DATA$total_hh_income_2018),
color = "Income Median"), key_glyph = "path") +
# Add graph and axis labels
labs(x = "Estimated Total Household Income (USD/year/household)",
y = "Proportion of households",
# Manually UPDATE the numbers in this character string to the number of observations for each household type
caption = "Based on:
Male-headed, typical: 595 observations
Male-headed, large: 187 observations
Female-headed: 144 observations") +
# Format x-axis labels as numbers with commas
# If your data has extreme income outliers,
# you may need to filter them or add x-axis limits so they do not warp the graph
scale_x_continuous(labels = comma) +
# Remove y-axis labels and ticks
theme(axis.text.y = element_blank(), axis.ticks.y = element_blank(),
# Remove background grid (the grid is the default)
panel.grid.major = element_blank(), panel.grid.minor = element_blank(),
# Move the legend to the bottom of the graph
legend.position="bottom",
# Remove legend title
legend.title = element_blank(),
# Remove gray background for legend symbols
legend.key=element_rect(fill=NA),
# Put a box around the legend
legend.box.background = element_rect(),
# Move caption to desired location
plot.caption = element_text(hjust = 0)) +
# Manually add legend
scale_color_manual(values = c("Living Income Benchmark"= "red",
"Income Mean"= "blue",
"Income Median"="green"))
## The first section of this code summarizes and formats the data to be graph-ready
DATA %>%
# Group by household type
group_by(grouping) %>%
# For each household type, summarize the mean gap to the living income,
# the mean noncocoa income, and the mean cocoa income
summarise(Gap = mean(benchmark - total_hh_income_2018),
Noncocoa = mean(total_hh_income_2018 - total_cocoa_income_2018),
cocoa = mean(total_cocoa_income_2018)) %>%
# Gather each income components into one column so the data is in 'long' format
gather(key = "Component", value = "Income", Gap:cocoa) %>%
# Re-level the income factors for the order you want them stacked on the graph
mutate(Component = factor(Component,
levels = c("Gap", "Noncocoa", "cocoa"))) %>%
# Generate ggplot graph for income by gender and income component
ggplot(aes(y = Income, x = grouping, fill = Component)) +
# Assign graph as stacked bar chart
geom_bar(position = "stack", stat = "identity") +
# Label the graph title, axis, and caption
labs(title = "Mean values",
y = "USD/year/household",
x = "",
# Manually UPDATE the numbers in this character string to the number of observations for each household type
caption = "Based on:
Male-headed, typical: 595 observations
Male-headed, large: 187 observations
Female-headed: 144 observations") +
# Label the legend
scale_fill_discrete(breaks=c("Gap",
"Noncocoa",
"cocoa"),
labels=c("Gap to the Living Income Benchmark",
"Other income",
"Income from main crop")) +
# Format y-axis labels with a comma
scale_y_continuous(labels = comma) +
# Remove x-axis grid lines and tick marks
theme(panel.grid.major.x = element_blank(),
axis.ticks.x = element_blank(),
axis.title.x = element_blank(),
# Center plot title
plot.title = element_text(hjust = 0.5),
# Move the legend to the bottom of the graph
legend.position="bottom",
# Remove legend title
legend.title = element_blank(),
# Put a box around the legend
legend.box.background = element_rect(),
# Move caption to desired location
plot.caption = element_text(hjust = 0)) +
# Add incomes to prospective graph components
geom_text(aes(label = round(Income)),
position = position_stack(vjust = 0.5),
size = 3)
DATA %>%
# Group by household type
group_by(grouping) %>%
# For each gender, calculate the average Foster–Greer–Thorbecke (FGT) index
summarise(FGT = mean(fgt_gap_with_food)) %>%
# Generate ggplot graph for percentage by gender
ggplot(aes(x = grouping, y = FGT)) +
# Assign graph as bar graph and color bars red for aesthetics
geom_col(fill= "red") +
# Label the graph title, axis, and caption
labs(title = "FGT index",
y = "Index value",
x = "",
# Manually UPDATE the numbers in this character string to the number of observations for each household type
caption = "Based on:
Male-headed, typical: 595 observations
Male-headed, large: 187 observations
Female-headed: 144 observations") +
# Format y-axis labels with a percent
scale_y_continuous(labels = percent) +
# Remove x-axis grid lines and tick marks
theme(panel.grid.major.x = element_blank(),
axis.ticks.x = element_blank(),
axis.title.x = element_blank(),
# Center plot title
plot.title = element_text(hjust = 0.5),
# Move caption to desired location
plot.caption = element_text(hjust = 0)) +
# Add percents to each graph bar
geom_text(aes(label = label_percent(accuracy = 1L)(FGT)),
position = position_stack(vjust = 0.5),
size = 3)
DATA %>%
# Group by household type
group_by(grouping) %>%
# For each gender, calculate the average Foster–Greer–Thorbecke (FGT) index
summarise(FGT = mean(fgt_gap)) %>%
# Generate ggplot graph for percentage by gender
ggplot(aes(x = grouping, y = FGT)) +
# Assign graph as bar graph and color bars red for aesthetics
geom_col(fill= "red") +
# Label the graph title, axis, and caption
labs(title = "FGT index",
y = "Index value",
x = "",
# Manually UPDATE the numbers in this character string to the number of observations for each household type
caption = "Based on:
Male-headed, typical: 595 observations
Male-headed, large: 187 observations
Female-headed: 144 observations") +
# Format y-axis labels with a percent
scale_y_continuous(labels = percent) +
# Remove x-axis grid lines and tick marks
theme(panel.grid.major.x = element_blank(),
axis.ticks.x = element_blank(),
axis.title.x = element_blank(),
# Center plot title
plot.title = element_text(hjust = 0.5),
# Move caption to desired location
plot.caption = element_text(hjust = 0)) +
# Add percents to each graph bar
geom_text(aes(label = label_percent(accuracy = 1L)(FGT)),
position = position_stack(vjust = 0.5),
size = 3)
## Import data set
df <- read_csv("KIT_Sample_Data.csv")
#### Before continuing any further, load the R libraries that have the necessary functions for this analysis.
# If you have not previously used these libraries,
# you will need to instaLl them with the function install.packages("LIBRARY NAME"). For example: install.packages(tidyverse)
library(tidyverse)
library(knitr)
library(scales)
## Import data set
df <- read_csv("KIT_Sample_Data.csv")
## Replace variable names
# Main crop
df$income_main_crop <- df$total_cocoa_income_2018
# Other income
# df$other_income <- df$
# Total income
df$total_hh_income <- df$total_hh_income_2018
# Replace graph labels
main_crop <-"cocoa"
currency <- "USD"
## Bar graph sections
# Gap to the mean
gap_color <- "#ed3833"
# Other income
other_color <- "#b3dceb"
# Income from main crop
main_color <- "#b3b3fa"
# Value of crops consumed at home
home_color <- "#fad8b3"
## Share of observations below the Living Income Benchmark
# Note: these bars all appear the same color
share_color <- "#ed3833"
## Distributional plots
## By household type
# Group 1
color_1 <- "#c1dfc1"
# Group 2
color_2 <- "#b6dce8"
# Group 3
color_3 <- "#c2c1fa"
## With mean and median
# Distribution curve
curve_color <- "#b6dce8"
# Income Mean
mean_color <- "blue"
# Income Median
median_color <-  "green"
# Living Income Benchmark
benchmark_color <- "red"
print(color_1, "test")
print(color_1)
print("test")
for (i in 1:length(unique(df$grouping))) {
### Add vertical lines for Living Income benchmark(s)
# Add and/or subtract lines based on number of household types
# and if you have a different benchmark for each.
print(paste(geom_vline(aes(xintercept = unique(df$grouping)[i],
color = below[i]),
key_glyph = "path"), "+" ))
}
shiny::runApp('Living_Income_RTemplates')
## The first section of this code summarizes and formats the data to be graph-ready
df %>%
# Group by household type
group_by(grouping) %>%
# For each household type, summarize the mean gap to the living income,
# the mean other income, and the mean main_crop income
summarise(Gap = mean(benchmark - total_hh_income),
Other = mean(total_hh_income - income_main_crop),
main_crop = mean(income_main_crop)) %>%
# Gather each income components into one column so the data is in 'long' format
gather(key = "Component", value = "Income", Gap:main_crop) %>%
# Re-level the income factors for the order you want them stacked on the graph
mutate(Component = factor(Component,
levels = c("Gap", "Other", "main_crop"))) %>%
# Generate ggplot graph for income by groupings and income component
ggplot(aes(y = Income, x = grouping, fill = Component)) +
# Assign graph as stacked bar chart
geom_bar(position = "stack", stat = "identity") +
# Label the graph title, axis, and caption
labs(title = "Mean values",
y = paste(currency, "/year/household)"),
x = "",
# Add caption with observation numbers for each household type
caption = paste("Based on: \n",
paste(names(table(df$grouping)),
":",
as.numeric(table(df$grouping)),
"observations \n ", collapse = ''), collapse = '')) +
# Label the legend and assign custom colors
scale_fill_manual(values=c(gap_color, other_color, main_color),
breaks=c("Gap", "Other", "main_crop"),
labels=c("Gap to the Living Income Benchmark",
"Other income",
"Income from main crop")) +
# Format y-axis labels with a comma
scale_y_continuous(labels = comma) +
# Remove x-axis grid lines and tick marks
theme(panel.grid.major.x = element_blank(),
axis.ticks.x = element_blank(),
axis.title.x = element_blank(),
# Center plot title
plot.title = element_text(hjust = 0.5),
# Move the legend to the bottom of the graph
legend.position="bottom",
# Remove legend title
legend.title = element_blank(),
# Put a box around the legend
legend.box.background = element_rect(),
# Move caption to desired location
plot.caption = element_text(hjust = 0)) +
# Add incomes to prospective graph components
geom_text(aes(label = round(Income)),
position = position_stack(vjust = 0.5),
size = 3)
runApp('Living_Income_RTemplates')
runApp('Living_Income_RTemplates')
runApp('Living_Income_RTemplates')
runApp('Living_Income_RTemplates')
gap_color
other_color
main_color
runApp('Living_Income_RTemplates')
runApp('Living_Income_RTemplates')
runApp('Living_Income_RTemplates')
runApp('Living_Income_RTemplates')
runApp('Living_Income_RTemplates')
runApp('Living_Income_RTemplates')
runApp()
runApp('Living_Income_RTemplates')
runApp('Living_Income_RTemplates')
runApp('Living_Income_RTemplates')
runApp('Living_Income_RTemplates')
runApp('Living_Income_RTemplates')
runApp('Living_Income_RTemplates')
runApp('Living_Income_RTemplates')
df$benchmark
runApp('Living_Income_RTemplates')
runApp('Living_Income_RTemplates')
runApp('Living_Income_RTemplates')
runApp('Living_Income_RTemplates')
runApp('Living_Income_RTemplates')
runApp('Living_Income_RTemplates')
runApp('Living_Income_RTemplates')
runApp('Living_Income_RTemplates')
runApp('Living_Income_RTemplates')
runApp('Living_Income_RTemplates')
runApp('Living_Income_RTemplates')
runApp('Living_Income_RTemplates')
runApp('Living_Income_RTemplates')
runApp('Living_Income_RTemplates')
runApp('Living_Income_RTemplates')
runApp('Living_Income_RTemplates')
runApp('Living_Income_RTemplates')
runApp('Living_Income_RTemplates')
runApp('Living_Income_RTemplates')
runApp('Living_Income_RTemplates')
runApp('Living_Income_RTemplates')
runApp('Living_Income_RTemplates')
runApp('Living_Income_RTemplates')
runApp('Living_Income_RTemplates')
runApp('Living_Income_RTemplates')
runApp('Living_Income_RTemplates')
runApp('Living_Income_RTemplates')
runApp('Living_Income_RTemplates')
runApp('Living_Income_RTemplates')
runApp('Living_Income_RTemplates')
runApp('Living_Income_RTemplates')
runApp('Living_Income_RTemplates')
total_hh_income < - colnames(data)[colnames(data) == input$total_hh_income]
runApp('Living_Income_RTemplates')
runApp('Living_Income_RTemplates')
runApp('Living_Income_RTemplates')
runApp('Living_Income_RTemplates')
runApp('Living_Income_RTemplates')
## Import data set
df <- read_csv("KIT_Sample_Data.csv")
## Replace variable names
# Main crop
df$income_main_crop <- df$total_cocoa_income_2018
# Other income
# df$other_income <- df$
# Total income
df$total_hh_income <- df$total_hh_income_2018
# Replace graph labels
main_crop <-"cocoa"
currency <- "USD"
test <- df$paste(total_hh_income_2018)
df$test <- NULL
df$test <- NULL
rename(df, replace = c("test" = main_crop))
rename(df, c("test" = main_crop))
rename(df, c(main_crop = "test"))
df$test <- NULL
rename(df, c(main_crop = "test"))
rename(df, c("main_crop" = "test"))
rename(df, c("test" = "main"))
df$test <- NULL
test <- df %>% rename(main_crop = "test")
test <- df %>% rename(main_crop = test)
df$test <- NA
test <- df %>% rename(main_crop = test)
test
df$test <- NA
test <- df %>% rename(paste(main_crop) = test)
test <- df %>% rename(print(main_crop) = test)
df$test <- NA
test <- df %>% rename(print(main_crop) = test)
runApp('Living_Income_RTemplates')
test1 <- input$total_hh_income
runApp('Living_Income_RTemplates')
runApp('Living_Income_RTemplates')
runApp('Living_Income_RTemplates')
runApp('Living_Income_RTemplates')
runApp('Living_Income_RTemplates')
runApp('Living_Income_RTemplates')
runApp('Living_Income_RTemplates')
runApp('Living_Income_RTemplates')
runApp('Living_Income_RTemplates')
runApp('Living_Income_RTemplates')
paste(main_crop)
runApp('Living_Income_RTemplates')
runApp('Living_Income_RTemplates')
runApp('Living_Income_RTemplates')
runApp('Living_Income_RTemplates')
## Import data set
df <- read_csv("KIT_Sample_Data.csv")
runApp('Living_Income_RTemplates')
runApp('Living_Income_RTemplates')
runApp('Living_Income_RTemplates')
runApp('Living_Income_RTemplates')
runApp('Living_Income_RTemplates')
runApp('Living_Income_RTemplates')
runApp('Living_Income_RTemplates')
runApp('Living_Income_RTemplates')
runApp('Living_Income_RTemplates')
runApp('Living_Income_RTemplates')
runApp('Living_Income_RTemplates')
runApp('Living_Income_RTemplates')
runApp('Living_Income_RTemplates')
# This is a Shiny web application. You can run the application by clicking
# the 'Run App' button above.
#
# Find out more about building applications with Shiny here:
#
#    http://shiny.rstudio.com/
#
library(rsconnect)
runApp('Living_Income_RTemplates')
install.packages("dplyr", dependencies=TRUE)
install.packages("dplyr", dependencies = TRUE)
install.packages("dplyr", dependencies = TRUE)
install.packages("dplyr", dependencies = TRUE)
install.packages("dplyr", dependencies = TRUE)
install.packages("dplyr", dependencies = TRUE)
install.packages("dplyr", dependencies = TRUE)
shiny::runApp('Living_Income_RTemplates')

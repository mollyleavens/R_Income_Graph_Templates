DATA %>%
# Set x-axis to key variable
ggplot(aes(x = total_hh_income_2018)) +
# Add density line. You can change the fill and line colors.
geom_density(color = "#add8e6", fill = "#add8e6") +
# Add vertical line for living income
geom_vline(aes(xintercept = mean(benchmark),
color = "Living Income Benchmark")) +
# Add vertical line for mean income
geom_vline(aes(xintercept = mean(DATA$total_hh_income_2018),
color = "Income Mean")) +
# Add vertical line for median income
geom_vline(aes(xintercept = median(DATA$total_hh_income_2018),
color = "Income Median")) +
# Add graph and axis labels
labs(title = "Distribution of Total Income",
x = "Estimated Total Household Income (USD/year/household)",
y = "Proportion of households",
# Manually UPDATE the numbers in this character string to the number of observations for each household type
caption = "Based on:
Male-headed, typical: 595 observations
Male-headed, large: 187 observations
Female-headed: 144 observations") +
# Format x-axis labels as numbers with commas
# If your data has extreme income outliers,
# you may need to filter them or add x-axis limits so they do not warp the graph
scale_x_continuous(labels = comma) +
# Remove y-axis labels and ticks
theme(axis.text.y = element_blank(), axis.ticks.y = element_blank(),
# Remove background grid (the grid is the default)
panel.grid.major = element_blank(), panel.grid.minor = element_blank(),
# Move caption to desired location
plot.caption = element_text(hjust = 0)) +
# Manually add legend
scale_color_manual(name = "Legend",
values = c("Living Income Benchmark"= "red",
"Income Mean"= "blue",
"Income Median"="green"))
DATA %>%
# Set x-axis to key variable
ggplot(aes(x = total_hh_income_2018)) +
# Add density line. You can change the fill and line colors.
geom_density(color = "#add8e6", fill = "#add8e6") +
# Add vertical line for living income
geom_vline(aes(xintercept = mean(benchmark),
color = "Living Income Benchmark")) +
# Add vertical line for mean income
geom_vline(aes(xintercept = mean(DATA$total_hh_income_2018),
color = "Income Mean")) +
# Add vertical line for median income
geom_vline(aes(xintercept = median(DATA$total_hh_income_2018),
color = "Income Median")) +
# Add graph and axis labels
labs(x = "Estimated Total Household Income (USD/year/household)",
y = "Proportion of households",
# Manually UPDATE the numbers in this character string to the number of observations for each household type
caption = "Based on:
Male-headed, typical: 595 observations
Male-headed, large: 187 observations
Female-headed: 144 observations") +
# Format x-axis labels as numbers with commas
# If your data has extreme income outliers,
# you may need to filter them or add x-axis limits so they do not warp the graph
scale_x_continuous(labels = comma) +
# Remove y-axis labels and ticks
theme(axis.text.y = element_blank(), axis.ticks.y = element_blank(),
# Remove background grid (the grid is the default)
panel.grid.major = element_blank(), panel.grid.minor = element_blank(),
# Move the legend to the bottom of the graph
legend.position="bottom",
# Move caption to desired location
plot.caption = element_text(hjust = 0)) +
# Manually add legend
scale_color_manual(name = "Legend",
values = c("Living Income Benchmark"= "red",
"Income Mean"= "blue",
"Income Median"="green"))
DATA %>%
# Set x-axis to key variable
ggplot(aes(x = total_hh_income_2018)) +
# Add density line. You can change the fill and line colors.
geom_density(color = "#add8e6", fill = "#add8e6") +
# Add vertical line for living income
geom_vline(aes(xintercept = mean(benchmark),
color = "Living Income Benchmark")) +
# Add vertical line for mean income
geom_vline(aes(xintercept = mean(DATA$total_hh_income_2018),
color = "Income Mean")) +
# Add vertical line for median income
geom_vline(aes(xintercept = median(DATA$total_hh_income_2018),
color = "Income Median")) +
# Add graph and axis labels
labs(x = "Estimated Total Household Income (USD/year/household)",
y = "Proportion of households",
# Manually UPDATE the numbers in this character string to the number of observations for each household type
caption = "Based on:
Male-headed, typical: 595 observations
Male-headed, large: 187 observations
Female-headed: 144 observations") +
# Format x-axis labels as numbers with commas
# If your data has extreme income outliers,
# you may need to filter them or add x-axis limits so they do not warp the graph
scale_x_continuous(labels = comma) +
# Remove y-axis labels and ticks
theme(axis.text.y = element_blank(), axis.ticks.y = element_blank(),
# Remove background grid (the grid is the default)
panel.grid.major = element_blank(), panel.grid.minor = element_blank(),
# Move the legend to the bottom of the graph
legend.position="bottom",
# Move caption to desired location
plot.caption = element_text(hjust = 0)) +
# Manually add legend
scale_color_manual(values = c("Living Income Benchmark"= "red",
"Income Mean"= "blue",
"Income Median"="green"))
DATA %>%
# Set x-axis to key variable
ggplot(aes(x = total_hh_income_2018)) +
# Add density line. You can change the fill and line colors.
geom_density(color = "#add8e6", fill = "#add8e6") +
# Add vertical line for living income
geom_vline(aes(xintercept = mean(benchmark),
color = "Living Income Benchmark")) +
# Add vertical line for mean income
geom_vline(aes(xintercept = mean(DATA$total_hh_income_2018),
color = "Income Mean")) +
# Add vertical line for median income
geom_vline(aes(xintercept = median(DATA$total_hh_income_2018),
color = "Income Median")) +
# Add graph and axis labels
labs(x = "Estimated Total Household Income (USD/year/household)",
y = "Proportion of households",
# Manually UPDATE the numbers in this character string to the number of observations for each household type
caption = "Based on:
Male-headed, typical: 595 observations
Male-headed, large: 187 observations
Female-headed: 144 observations") +
# Format x-axis labels as numbers with commas
# If your data has extreme income outliers,
# you may need to filter them or add x-axis limits so they do not warp the graph
scale_x_continuous(labels = comma) +
# Remove y-axis labels and ticks
theme(axis.text.y = element_blank(), axis.ticks.y = element_blank(),
# Remove background grid (the grid is the default)
panel.grid.major = element_blank(), panel.grid.minor = element_blank(),
# Move the legend to the bottom of the graph
legend.position="bottom",
# Remove legend title
legend.title = element_blank(),
legend.key=element_rect(fill=NA),
# Move caption to desired location
plot.caption = element_text(hjust = 0)) +
# Manually add legend
scale_color_manual(values = c("Living Income Benchmark"= "red",
"Income Mean"= "blue",
"Income Median"="green"))
DATA %>%
# Set x-axis to key variable
ggplot(aes(x = total_hh_income_2018)) +
# Add density line. You can change the fill and line colors.
geom_density(color = "#add8e6", fill = "#add8e6") +
# Add vertical line for living income
geom_vline(aes(xintercept = mean(benchmark),
color = "Living Income Benchmark"), key_glyph = "path") +
# Add vertical line for mean income
geom_vline(aes(xintercept = mean(DATA$total_hh_income_2018),
color = "Income Mean"), key_glyph = "path") +
# Add vertical line for median income
geom_vline(aes(xintercept = median(DATA$total_hh_income_2018),
color = "Income Median"), key_glyph = "path") +
# Add graph and axis labels
labs(x = "Estimated Total Household Income (USD/year/household)",
y = "Proportion of households",
# Manually UPDATE the numbers in this character string to the number of observations for each household type
caption = "Based on:
Male-headed, typical: 595 observations
Male-headed, large: 187 observations
Female-headed: 144 observations") +
# Format x-axis labels as numbers with commas
# If your data has extreme income outliers,
# you may need to filter them or add x-axis limits so they do not warp the graph
scale_x_continuous(labels = comma) +
# Remove y-axis labels and ticks
theme(axis.text.y = element_blank(), axis.ticks.y = element_blank(),
# Remove background grid (the grid is the default)
panel.grid.major = element_blank(), panel.grid.minor = element_blank(),
# Move the legend to the bottom of the graph
legend.position="bottom",
# Remove legend title
legend.title = element_blank(),
# Remove gray background for legend symbols
legend.key=element_rect(fill=NA),
# Move caption to desired location
plot.caption = element_text(hjust = 0)) +
# Manually add legend
scale_color_manual(values = c("Living Income Benchmark"= "red",
"Income Mean"= "blue",
"Income Median"="green"))
DATA %>%
# Set x-axis to total household income
ggplot(aes(x = total_hh_income_2018,
# Color by household type
fill = grouping)) +
# Add density line. You can change the fill and line colors.
geom_density(alpha = 0.9, color = "grey") +
### Add vertical lines for Living Income benchmark(s)
# UPDATE these benchmarks and percent above manually
# Add and/or subtract lines based on number of household types
# and if you have a different benchmark for each.
geom_vline(aes(xintercept = 4001,
color = "Living Income Female-headed: 90% below")) +
geom_vline(aes(xintercept = 4742,
color = "Living Income Male-headed, typical: 91% below")) +
geom_vline(aes(xintercept = 5123,
color = "Living Income Male-headed, large: 59% below")) +
scale_color_manual(name = "Legend",
values = c("Living Income Female-headed: 90% below"= "red",
"Living Income Male-headed, typical: 91% below"= "blue",
"Living Income Male-headed, large: 59% below"="green")) +
# Add graph and axis labels
labs(x = "Estimated Total Household Income (USD/year/household)",
y = "Proportion of households",
# Manually UPDATE the numbers in this character string to the number of observations for each household type
caption = "Based on:
Male-headed, typical: 595 observations
Male-headed, large: 187 observations
Female-headed: 144 observations") +
# Format x-axis labels as numbers with commas
# If your data has extreme income outliers,
# you may need to filter them or add x-axis limits so they do not warp the graph
scale_x_continuous(labels = comma) +
# Remove y-axis labels and ticks
theme(axis.text.y = element_blank(), axis.ticks.y = element_blank(),
# Remove background grid (the grid is the default)
panel.grid.major = element_blank(), panel.grid.minor = element_blank(),
# Move the legend to the bottom of the graph
legend.position="bottom",
# Remove legend title
legend.title = element_blank(),
# Move caption to desired location
plot.caption = element_text(hjust = 0)) +
# Wrap legend onto 2 lines to fit everything neatly
guides(fill = FALSE) +
# Wrap legend onto 3 lines to fit everything neatly
guides(color = guide_legend(nrow = 3))
DATA %>%
# Set x-axis to total household income
ggplot(aes(x = total_hh_income_2018,
# Color by household type
fill = grouping)) +
# Add density line. You can change the fill and line colors.
geom_density(alpha = 0.9, color = "grey") +
### Add vertical lines for Living Income benchmark(s)
# UPDATE these benchmarks and percent above manually
# Add and/or subtract lines based on number of household types
# and if you have a different benchmark for each.
geom_vline(aes(xintercept = 4001,
color = "Living Income Female-headed: 90% below"),
key_glyph = "path") +
geom_vline(aes(xintercept = 4742,
color = "Living Income Male-headed, typical: 91% below"),
key_glyph = "path") +
geom_vline(aes(xintercept = 5123,
color = "Living Income Male-headed, large: 59% below"),
key_glyph = "path") +
scale_color_manual(name = "Legend",
values = c("Living Income Female-headed: 90% below"= "red",
"Living Income Male-headed, typical: 91% below"= "blue",
"Living Income Male-headed, large: 59% below"="green")) +
# Add graph and axis labels
labs(x = "Estimated Total Household Income (USD/year/household)",
y = "Proportion of households",
# Manually UPDATE the numbers in this character string to the number of observations for each household type
caption = "Based on:
Male-headed, typical: 595 observations
Male-headed, large: 187 observations
Female-headed: 144 observations") +
# Format x-axis labels as numbers with commas
# If your data has extreme income outliers,
# you may need to filter them or add x-axis limits so they do not warp the graph
scale_x_continuous(labels = comma) +
# Remove y-axis labels and ticks
theme(axis.text.y = element_blank(), axis.ticks.y = element_blank(),
# Remove background grid (the grid is the default)
panel.grid.major = element_blank(), panel.grid.minor = element_blank(),
# Move the legend to the bottom of the graph
legend.position="bottom",
# Remove legend title
legend.title = element_blank(),
# Remove gray background for legend symbols
legend.key=element_rect(fill=NA),
# Move caption to desired location
plot.caption = element_text(hjust = 0)) +
# Wrap legend onto 2 lines to fit everything neatly
guides(fill = FALSE) +
# Wrap legend onto 3 lines to fit everything neatly
guides(color = guide_legend(nrow = 3))
DATA %>%
# Set x-axis to total household income
ggplot(aes(x = total_hh_income_2018,
# Color by household type
fill = grouping)) +
# Add density line. You can change the fill and line colors.
geom_density(alpha = 0.9, color = "grey") +
### Add vertical lines for Living Income benchmark(s)
# UPDATE these benchmarks and percent above manually
# Add and/or subtract lines based on number of household types
# and if you have a different benchmark for each.
geom_vline(aes(xintercept = 4001,
color = "Living Income Female-headed: 90% below"),
key_glyph = "path") +
geom_vline(aes(xintercept = 4742,
color = "Living Income Male-headed, typical: 91% below"),
key_glyph = "path") +
geom_vline(aes(xintercept = 5123,
color = "Living Income Male-headed, large: 59% below"),
key_glyph = "path") +
scale_color_manual(name = "Legend",
values = c("Living Income Female-headed: 90% below"= "red",
"Living Income Male-headed, typical: 91% below"= "blue",
"Living Income Male-headed, large: 59% below"="green")) +
# Add graph and axis labels
labs(x = "Estimated Total Household Income (USD/year/household)",
y = "Proportion of households",
# Manually UPDATE the numbers in this character string to the number of observations for each household type
caption = "Based on:
Male-headed, typical: 595 observations
Male-headed, large: 187 observations
Female-headed: 144 observations") +
# Format x-axis labels as numbers with commas
# If your data has extreme income outliers,
# you may need to filter them or add x-axis limits so they do not warp the graph
scale_x_continuous(labels = comma) +
# Remove y-axis labels and ticks
theme(axis.text.y = element_blank(), axis.ticks.y = element_blank(),
# Remove background grid (the grid is the default)
panel.grid.major = element_blank(), panel.grid.minor = element_blank(),
# Move the legend to the bottom of the graph
legend.position="bottom",
# Remove legend title
legend.title = element_blank(),
# Remove gray background for legend symbols
legend.key=element_rect(fill=NA),
legend.box.background = element_rect(),
# Move caption to desired location
plot.caption = element_text(hjust = 0)) +
# Wrap legend onto 2 lines to fit everything neatly
guides(fill = FALSE) +
# Wrap legend onto 3 lines to fit everything neatly
guides(color = guide_legend(nrow = 3))
DATA %>%
# Set x-axis to key variable
ggplot(aes(x = total_hh_income_2018)) +
# Add density line. You can change the fill and line colors.
geom_density(color = "#add8e6", fill = "#add8e6") +
# Add vertical line for living income
geom_vline(aes(xintercept = mean(benchmark),
color = "Living Income Benchmark"), key_glyph = "path") +
# Add vertical line for mean income
geom_vline(aes(xintercept = mean(DATA$total_hh_income_2018),
color = "Income Mean"), key_glyph = "path") +
# Add vertical line for median income
geom_vline(aes(xintercept = median(DATA$total_hh_income_2018),
color = "Income Median"), key_glyph = "path") +
# Add graph and axis labels
labs(x = "Estimated Total Household Income (USD/year/household)",
y = "Proportion of households",
# Manually UPDATE the numbers in this character string to the number of observations for each household type
caption = "Based on:
Male-headed, typical: 595 observations
Male-headed, large: 187 observations
Female-headed: 144 observations") +
# Format x-axis labels as numbers with commas
# If your data has extreme income outliers,
# you may need to filter them or add x-axis limits so they do not warp the graph
scale_x_continuous(labels = comma) +
# Remove y-axis labels and ticks
theme(axis.text.y = element_blank(), axis.ticks.y = element_blank(),
# Remove background grid (the grid is the default)
panel.grid.major = element_blank(), panel.grid.minor = element_blank(),
# Move the legend to the bottom of the graph
legend.position="bottom",
# Remove legend title
legend.title = element_blank(),
# Remove gray background for legend symbols
legend.key=element_rect(fill=NA),
# Put a box around the legend
legend.box.background = element_rect(),
# Move caption to desired location
plot.caption = element_text(hjust = 0)) +
# Manually add legend
scale_color_manual(values = c("Living Income Benchmark"= "red",
"Income Mean"= "blue",
"Income Median"="green"))
## The first section of this code summarizes and formats the data to be graph-ready
DATA %>%
# Group by household type
group_by(grouping) %>%
# For each household type, summarize the mean gap to the living income,
# the mean noncocoa income, and the mean cocoa income
summarise(Gap = mean(benchmark - total_hh_income_2018),
Noncocoa = mean(total_hh_income_2018 - total_cocoa_income_2018),
cocoa = mean(total_cocoa_income_2018)) %>%
# Gather each income components into one column so the data is in 'long' format
gather(key = "Component", value = "Income", Gap:cocoa) %>%
# Re-level the income factors for the order you want them stacked on the graph
mutate(Component = factor(Component,
levels = c("Gap", "Noncocoa", "cocoa"))) %>%
# Generate ggplot graph for income by gender and income component
ggplot(aes(y = Income, x = grouping, fill = Component)) +
# Assign graph as stacked bar chart
geom_bar(position = "stack", stat = "identity") +
# Label the graph title, axis, and caption
labs(title = "Mean values",
y = "USD/year/household",
x = "",
# Manually UPDATE the numbers in this character string to the number of observations for each household type
caption = "Based on:
Male-headed, typical: 595 observations
Male-headed, large: 187 observations
Female-headed: 144 observations") +
# Label the legend
scale_fill_discrete(breaks=c("Gap",
"Noncocoa",
"cocoa"),
labels=c("Gap to the Living Income Benchmark",
"Other income",
"Income from main crop")) +
# Format y-axis labels with a comma
scale_y_continuous(labels = comma) +
# Remove x-axis grid lines and tick marks
theme(panel.grid.major.x = element_blank(),
axis.ticks.x = element_blank(),
axis.title.x = element_blank(),
# Center plot title
plot.title = element_text(hjust = 0.5),
# Move the legend to the bottom of the graph
legend.position="bottom",
# Remove legend title
legend.title = element_blank(),
# Put a box around the legend
legend.box.background = element_rect(),
# Move caption to desired location
plot.caption = element_text(hjust = 0)) +
# Add incomes to prospective graph components
geom_text(aes(label = round(Income)),
position = position_stack(vjust = 0.5),
size = 3)
DATA %>%
# Group by household type
group_by(grouping) %>%
# For each gender, calculate the average Foster–Greer–Thorbecke (FGT) index
summarise(FGT = mean(fgt_gap_with_food)) %>%
# Generate ggplot graph for percentage by gender
ggplot(aes(x = grouping, y = FGT)) +
# Assign graph as bar graph and color bars red for aesthetics
geom_col(fill= "red") +
# Label the graph title, axis, and caption
labs(title = "FGT index",
y = "Index value",
x = "",
# Manually UPDATE the numbers in this character string to the number of observations for each household type
caption = "Based on:
Male-headed, typical: 595 observations
Male-headed, large: 187 observations
Female-headed: 144 observations") +
# Format y-axis labels with a percent
scale_y_continuous(labels = percent) +
# Remove x-axis grid lines and tick marks
theme(panel.grid.major.x = element_blank(),
axis.ticks.x = element_blank(),
axis.title.x = element_blank(),
# Center plot title
plot.title = element_text(hjust = 0.5),
# Move caption to desired location
plot.caption = element_text(hjust = 0)) +
# Add percents to each graph bar
geom_text(aes(label = label_percent(accuracy = 1L)(FGT)),
position = position_stack(vjust = 0.5),
size = 3)
DATA %>%
# Group by household type
group_by(grouping) %>%
# For each gender, calculate the average Foster–Greer–Thorbecke (FGT) index
summarise(FGT = mean(fgt_gap)) %>%
# Generate ggplot graph for percentage by gender
ggplot(aes(x = grouping, y = FGT)) +
# Assign graph as bar graph and color bars red for aesthetics
geom_col(fill= "red") +
# Label the graph title, axis, and caption
labs(title = "FGT index",
y = "Index value",
x = "",
# Manually UPDATE the numbers in this character string to the number of observations for each household type
caption = "Based on:
Male-headed, typical: 595 observations
Male-headed, large: 187 observations
Female-headed: 144 observations") +
# Format y-axis labels with a percent
scale_y_continuous(labels = percent) +
# Remove x-axis grid lines and tick marks
theme(panel.grid.major.x = element_blank(),
axis.ticks.x = element_blank(),
axis.title.x = element_blank(),
# Center plot title
plot.title = element_text(hjust = 0.5),
# Move caption to desired location
plot.caption = element_text(hjust = 0)) +
# Add percents to each graph bar
geom_text(aes(label = label_percent(accuracy = 1L)(FGT)),
position = position_stack(vjust = 0.5),
size = 3)
